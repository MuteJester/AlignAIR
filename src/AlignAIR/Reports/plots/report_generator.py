import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.io as pio
from datetime import datetime
import os


class AlignAIRReportGenerator:
    """
    Generates comprehensive HTML reports combining multiple plot types.
    """

    def __init__(self, predict_object, groundtruth_table, genairr_dataconfig=None):
        self.predict_object = predict_object
        self.groundtruth_table = groundtruth_table
        self.genairr_dataconfig = genairr_dataconfig
        self.plots = []
        self.report_metadata = {
            'generation_time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'total_sequences': len(groundtruth_table),
            'model_type': 'AlignAIR',
        }

    def add_plot(self, plot_class, title=None, description=None):
        """Add a plot to the report"""
        try:
            plot_instance = plot_class(self.predict_object, self.groundtruth_table)
            fig = plot_instance.get_panel()
            
            self.plots.append({
                'figure': fig,
                'title': title or plot_class.__name__,
                'description': description or f"Analysis generated by {plot_class.__name__}",
                'class_name': plot_class.__name__
            })
            
            print(f"âœ“ Added {plot_class.__name__} to report")
            return True
            
        except Exception as e:
            print(f"âœ— Failed to add {plot_class.__name__}: {str(e)}")
            return False

    def generate_summary_statistics(self):
        """Generate summary statistics for the report header"""
        stats = {
            'total_sequences': len(self.groundtruth_table),
            'genes_analyzed': [],
            'performance_summary': {}
        }

        # Check which genes are available
        for gene in ['v', 'd', 'j']:
            if f'{gene}_call' in self.groundtruth_table.columns:
                stats['genes_analyzed'].append(gene.upper())

        # Add basic performance metrics if available
        if hasattr(self.predict_object, 'selected_allele_calls'):
            for gene in ['v', 'd', 'j']:
                if (gene in self.predict_object.selected_allele_calls and 
                    f'{gene}_call' in self.groundtruth_table.columns):
                    
                    # Calculate basic accuracy
                    predicted = self.predict_object.selected_allele_calls[gene]
                    ground_truth = self.groundtruth_table[f'{gene}_call'].apply(lambda x: set(x.split(',')))
                    
                    correct = 0
                    for pred, true in zip(predicted, ground_truth):
                        pred_set = set(pred) if isinstance(pred, list) else {pred}
                        if len(pred_set.intersection(true)) > 0:
                            correct += 1
                    
                    accuracy = correct / len(predicted) if predicted else 0
                    stats['performance_summary'][gene.upper()] = f"{accuracy:.2f}"

        return stats

    def create_header_section(self):
        """Create a header section with summary information"""
        stats = self.generate_summary_statistics()
        
        header_html = f"""
        <div style="position: relative; text-align: center; margin: 0 0 40px 0; padding: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 20px; box-shadow: 0 10px 30px rgba(0,0,0,0.2);">
            {self.create_navigation_menu()}
            <div style="max-width: 1000px; margin: 0 auto;">
                <h1 style="color: white; margin: 0 0 15px 0; font-size: 42px; font-weight: 700; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);">
                    AlignAIR Model Evaluation Report
                </h1>
                <p style="color: rgba(255,255,255,0.9); margin: 0 0 30px 0; font-size: 18px; font-weight: 300;">
                    Comprehensive Performance Analysis and Model Insights
                </p>
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 12px; backdrop-filter: blur(10px); margin-bottom: 20px;">
                    <p style="color: rgba(255,255,255,0.8); margin: 0; font-size: 14px;">
                        Generated on {self.report_metadata['generation_time']} | AlignAIR Evaluation System v2.0
                    </p>
                </div>
                
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 30px 0;">
                    <div style="background: rgba(255,255,255,0.15); padding: 25px; border-radius: 15px; backdrop-filter: blur(10px); border: 1px solid rgba(255,255,255,0.2);">
                        <div style="font-size: 36px; font-weight: 700; margin-bottom: 8px; color: #fff;">
                            {stats['total_sequences']:,}
                        </div>
                        <div style="font-size: 14px; color: rgba(255,255,255,0.8); font-weight: 500;">
                            Total Sequences Analyzed
                        </div>
                    </div>
                    <div style="background: rgba(255,255,255,0.15); padding: 25px; border-radius: 15px; backdrop-filter: blur(10px); border: 1px solid rgba(255,255,255,0.2);">
                        <div style="font-size: 36px; font-weight: 700; margin-bottom: 8px; color: #fff;">
                            {', '.join(stats['genes_analyzed']) if stats['genes_analyzed'] else 'N/A'}
                        </div>
                        <div style="font-size: 14px; color: rgba(255,255,255,0.8); font-weight: 500;">
                            Genes Analyzed
                        </div>
                    </div>
                    <div style="background: rgba(255,255,255,0.15); padding: 25px; border-radius: 15px; backdrop-filter: blur(10px); border: 1px solid rgba(255,255,255,0.2);">
                        <div style="font-size: 36px; font-weight: 700; margin-bottom: 8px; color: #fff;">
                            {len(self.plots)}
                        </div>
                        <div style="font-size: 14px; color: rgba(255,255,255,0.8); font-weight: 500;">
                            Analysis Modules
                        </div>
                    </div>
                    <div style="background: rgba(255,255,255,0.15); padding: 25px; border-radius: 15px; backdrop-filter: blur(10px); border: 1px solid rgba(255,255,255,0.2);">
                        <div style="font-size: 36px; font-weight: 700; margin-bottom: 8px; color: #fff;">
                            {len(stats['performance_summary'])}
                        </div>
                        <div style="font-size: 14px; color: rgba(255,255,255,0.8); font-weight: 500;">
                            Performance Metrics
                        </div>
                    </div>
                </div>
                
                {self._create_performance_summary_table(stats['performance_summary']) if stats['performance_summary'] else ''}
            </div>
        </div>
        """
        
        return header_html

    def _create_performance_summary_table(self, performance_summary):
        """Create a performance summary table"""
        if not performance_summary:
            return ""
            
        table_html = """
        <div style="margin: 30px auto; max-width: 500px;">
            <h4 style="text-align: center; color: white; margin-bottom: 20px; font-size: 18px; font-weight: 600;">Performance Overview</h4>
            <table style="width: 100%; border-collapse: collapse; background: rgba(255,255,255,0.95); backdrop-filter: blur(10px); border-radius: 12px; overflow: hidden; box-shadow: 0 8px 25px rgba(0,0,0,0.15);">
                <thead>
                    <tr style="background: linear-gradient(135deg, #3498db 0%, #2980b9 100%); color: white;">
                        <th style="padding: 15px; text-align: left; font-weight: 600; font-size: 14px;">Gene</th>
                        <th style="padding: 15px; text-align: center; font-weight: 600; font-size: 14px;">Accuracy</th>
                        <th style="padding: 15px; text-align: center; font-weight: 600; font-size: 14px;">Performance</th>
                    </tr>
                </thead>
                <tbody>
        """
        
        for gene, accuracy in performance_summary.items():
            # Convert accuracy to float and determine performance level
            acc_float = float(accuracy)
            if acc_float >= 0.9:
                performance_color = "#27ae60"
                performance_text = "Excellent"
                performance_icon = "ðŸŸ¢"
            elif acc_float >= 0.8:
                performance_color = "#f39c12"
                performance_text = "Good"
                performance_icon = "ðŸŸ¡"
            elif acc_float >= 0.7:
                performance_color = "#e67e22"
                performance_text = "Fair"
                performance_icon = "ðŸŸ "
            else:
                performance_color = "#e74c3c"
                performance_text = "Needs Improvement"
                performance_icon = "ðŸ”´"
            
            table_html += f"""
                    <tr style="border-bottom: 1px solid rgba(0,0,0,0.05); transition: background-color 0.3s ease;">
                        <td style="padding: 12px 15px; font-weight: 600; color: #2c3e50; font-size: 16px;">{gene}</td>
                        <td style="padding: 12px 15px; text-align: center; font-weight: 700; color: {performance_color}; font-size: 16px;">{accuracy}</td>
                        <td style="padding: 12px 15px; text-align: center; color: {performance_color}; font-weight: 500; font-size: 14px;">
                            {performance_icon} {performance_text}
                        </td>
                    </tr>
            """
        
        table_html += """
                </tbody>
            </table>
        </div>
        """
        
        return table_html

    def create_navigation_menu(self):
        """Create a navigation menu for the report sections"""
        nav_html = """
        <div id="navigation-menu" style="position: absolute; top: 20px; right: 20px; background-color: white; padding: 20px; border-radius: 12px; box-shadow: 0 6px 20px rgba(0,0,0,0.15); z-index: 100; max-width: 320px; border: 1px solid #e1e8ed;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                <h4 style="margin: 0; color: #2c3e50; font-size: 16px; font-weight: 600;">Navigation Menu</h4>
                <button id="nav-toggle" onclick="toggleNav()" style="background: none; border: none; font-size: 18px; cursor: pointer; color: #7f8c8d; display: none;">âˆ’</button>
            </div>
            <div id="nav-content" style="max-height: 400px; overflow-y: auto;">
        """
        
        for i, plot in enumerate(self.plots):
            nav_html += f"""
                <a href="#section_{i}" class="nav-link" style="display: block; padding: 10px 12px; text-decoration: none; color: #3498db; border-left: 3px solid transparent; margin: 3px 0; border-radius: 6px; transition: all 0.3s ease; font-size: 14px;">
                    <span style="font-weight: 500;">{i+1}.</span> {plot['title']}
                </a>
            """
        
        nav_html += """
            </div>
        </div>
        """
        
        return nav_html

    def save_report(self, save_path, filename=None):
        """Save the complete report as an HTML file"""
        if not self.plots:
            print("No plots to save. Add plots using add_plot() method first.")
            return False

        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"alignair_evaluation_report_{timestamp}.html"

        filepath = os.path.join(save_path, filename)
        
        try:
            # Create the HTML content
            html_content = self._generate_html_content()
            
            # Write to file
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            print(f"âœ“ Report saved successfully: {filepath}")
            return filepath
            
        except Exception as e:
            print(f"âœ— Failed to save report: {str(e)}")
            return False

    def _generate_html_content(self):
        """Generate the complete HTML content"""
        # Start with base HTML structure
        html_content = """
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>AlignAIR Evaluation Report</title>
            <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
            <style>
                * {
                    box-sizing: border-box;
                }
                
                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    margin: 0;
                    padding: 0;
                    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
                    line-height: 1.6;
                    color: #2c3e50;
                }
                
                .main-container {
                    max-width: none;
                    margin: 0;
                    padding: 20px;
                    width: 100%;
                    box-sizing: border-box;
                }
                
                .section {
                    margin: 50px 0;
                    background-color: white;
                    border-radius: 16px;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                    overflow: hidden;
                    border: 1px solid rgba(255,255,255,0.2);
                    backdrop-filter: blur(10px);
                    width: 100%;
                    box-sizing: border-box;
                    position: relative;
                }
                
                .section-header {
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 25px 35px;
                    margin: 0;
                    position: relative;
                    overflow: hidden;
                }
                
                .section-header::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 20"><defs><radialGradient id="a" cx="50%" cy="50%" r="50%"><stop offset="0%" stop-color="white" stop-opacity="0.1"/><stop offset="100%" stop-color="white" stop-opacity="0"/></radialGradient></defs><rect width="100" height="20" fill="url(%23a)"/></svg>');
                    opacity: 0.3;
                }
                
                .section-header h2 {
                    margin: 0;
                    font-size: 24px;
                    font-weight: 600;
                    position: relative;
                    z-index: 1;
                }
                
                .section-content {
                    padding: 35px;
                }
                
                .plot-container {
                    margin: 25px 0;
                    border-radius: 12px;
                    overflow: visible;
                    border: 1px solid #e1e8ed;
                    background-color: #fafbfc;
                    min-height: 900px;
                    width: 100%;
                    padding: 30px;
                    box-sizing: border-box;
                    /* Ensure Plotly has enough space for colorbars and axis labels */
                    padding-left: 50px;
                    padding-right: 150px; /* Extra space for colorbars */
                    padding-bottom: 50px; /* Extra space for axis labels */
                }
                
                .plot-container > div {
                    width: 100% !important;
                    height: auto !important;
                    min-height: 900px !important;
                }
                
                .plotly-graph-div {
                    width: 100% !important;
                    height: auto !important;
                    min-height: 900px !important;
                }
                
                /* Force Plotly to use full container width */
                .js-plotly-plot {
                    width: 100% !important;
                    height: auto !important;
                    min-height: 900px !important;
                }
                
                /* Ensure Plotly content doesn't overflow */
                .plotly-graph-div .plot-container {
                    overflow: visible !important;
                }
                
                /* Fix for Plotly colorbars and legends */
                .plotly-graph-div .colorbar,
                .plotly-graph-div .legend {
                    overflow: visible !important;
                }
                
                .description {
                    color: #5a6c7d;
                    font-size: 15px;
                    line-height: 1.7;
                    margin-bottom: 25px;
                    padding: 20px;
                    background: linear-gradient(135deg, #f8f9fc 0%, #e9ecef 100%);
                    border-left: 4px solid #3498db;
                    border-radius: 8px;
                    position: relative;
                }
                
                .description::before {
                    content: 'ðŸ“Š';
                    position: absolute;
                    top: 20px;
                    right: 20px;
                    font-size: 20px;
                    opacity: 0.7;
                }
                
                .interpretation-guide {
                    background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);
                    border: 1px solid #bbdefb;
                    border-radius: 10px;
                    padding: 20px;
                    margin-top: 20px;
                    position: relative;
                }
                
                .interpretation-guide::before {
                    content: 'ðŸ’¡';
                    position: absolute;
                    top: 15px;
                    right: 15px;
                    font-size: 18px;
                }
                
                .interpretation-guide h4 {
                    color: #1976d2;
                    margin: 0 0 15px 0;
                    font-size: 16px;
                    font-weight: 600;
                }
                
                .interpretation-guide ul {
                    margin: 10px 0;
                    padding-left: 20px;
                }
                
                .interpretation-guide li {
                    margin: 8px 0;
                    color: #37474f;
                    font-size: 14px;
                }
                
                .footer {
                    text-align: center;
                    margin-top: 60px;
                    padding: 30px;
                    color: #7f8c8d;
                    border-top: 2px solid #ecf0f1;
                    background: linear-gradient(135deg, #fdfefe 0%, #f8f9fa 100%);
                    border-radius: 12px;
                }
                
                /* Smooth scrolling */
                html {
                    scroll-behavior: smooth;
                    scroll-padding-top: 20px; /* No need for fixed nav offset */
                }
                
                /* Navigation hover effects */
                .nav-link:hover {
                    border-left-color: #3498db !important;
                    background-color: #f8f9fa;
                    transform: translateX(5px);
                }
                
                /* Responsive design */
                @media (max-width: 1200px) {
                    .main-container {
                        padding: 15px;
                        width: 100%;
                    }
                    
                    #navigation-menu {
                        position: relative !important;
                        top: auto !important;
                        right: auto !important;
                        margin: 20px auto;
                        max-width: 100%;
                    }
                    
                    .plot-container {
                        margin: 15px 0;
                        min-height: 800px;
                        padding: 20px;
                        padding-right: 80px; /* Reduced for smaller screens */
                    }
                    
                    .plot-container > div {
                        min-height: 800px !important;
                    }
                    
                    .plotly-graph-div, .js-plotly-plot {
                        min-height: 800px !important;
                    }
                }
                
                @media (max-width: 768px) {
                    #navigation-menu {
                        padding: 10px 15px;
                    }
                    
                    #nav-toggle {
                        display: block !important;
                    }
                    
                    #nav-content {
                        display: none;
                        margin-top: 15px;
                    }
                    
                    .section-content {
                        padding: 20px;
                    }
                    
                    .section-header {
                        padding: 20px;
                    }
                    
                    .section-header h2 {
                        font-size: 20px;
                    }
                    
                    .plot-container {
                        margin: 10px 0;
                        min-height: 700px;
                        padding: 15px;
                        padding-right: 50px; /* Minimal padding for mobile */
                    }
                    
                    .plot-container > div {
                        min-height: 700px !important;
                    }
                    
                    .plotly-graph-div, .js-plotly-plot {
                        min-height: 700px !important;
                    }
                }
                
                /* Print styles */
                @media print {
                    body {
                        padding-top: 0;
                    }
                    
                    #navigation-menu {
                        display: none;
                    }
                    
                    .main-container {
                        padding: 20px;
                        width: 100%;
                    }
                    
                    .section {
                        break-inside: avoid;
                        margin: 20px 0;
                    }
                }
                
                /* Loading animation */
                .loading {
                    text-align: center;
                    padding: 40px;
                    color: #7f8c8d;
                }
                
                .loading::after {
                    content: '';
                    width: 40px;
                    height: 40px;
                    margin: 20px auto;
                    border: 4px solid #f3f3f3;
                    border-top: 4px solid #3498db;
                    border-radius: 50%;
                    animation: spin 1s linear infinite;
                    display: block;
                }
                
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
                
                /* Print styles */
                @media print {
                    #navigation-menu {
                        display: none;
                    }
                    
                    .main-container {
                        padding: 20px;
                        width: 100%;
                    }
                }
            </style>
            <script>
                function toggleNav() {
                    const content = document.getElementById('nav-content');
                    const toggle = document.getElementById('nav-toggle');
                    
                    if (content.style.display === 'none') {
                        content.style.display = 'block';
                        toggle.textContent = 'âˆ’';
                    } else {
                        content.style.display = 'none';
                        toggle.textContent = '+';
                    }
                }
                
                // Smooth scrolling for navigation links
                document.addEventListener('DOMContentLoaded', function() {
                    const navLinks = document.querySelectorAll('.nav-link');
                    navLinks.forEach(link => {
                        link.addEventListener('click', function(e) {
                            e.preventDefault();
                            const target = document.querySelector(this.getAttribute('href'));
                            if (target) {
                                target.scrollIntoView({
                                    behavior: 'smooth',
                                    block: 'start'
                                });
                            }
                        });
                    });
                    
                    // Ensure all Plotly plots are properly sized with extra space for colorbars
                    setTimeout(function() {
                        resizePlots();
                    }, 1500);
                    
                    // Additional resize after longer delay to ensure everything is loaded
                    setTimeout(function() {
                        resizePlots();
                    }, 3000);
                    
                    // Add window resize handler for plots
                    window.addEventListener('resize', function() {
                        setTimeout(resizePlots, 100);
                    });
                });
                
                function resizePlots() {
                    const plots = document.querySelectorAll('.plotly-graph-div');
                    plots.forEach(function(plot) {
                        const container = plot.closest('.plot-container');
                        if (container) {
                            // Calculate available width accounting for colorbar space
                            const containerWidth = container.offsetWidth - 200; // Account for padding and colorbar space
                            plot.style.width = containerWidth + 'px';
                            plot.style.minHeight = '900px';
                            
                            // Update the plot layout to use the available space efficiently
                            if (window.Plotly && window.Plotly.Plots) {
                                const plotElement = plot;
                                if (plotElement && plotElement.layout) {
                                    const update = {
                                        width: containerWidth,
                                        height: 900,
                                        margin: {
                                            l: 80,   // Left margin for y-axis labels
                                            r: 120,  // Right margin for colorbar
                                            t: 80,   // Top margin for title
                                            b: 80    // Bottom margin for x-axis labels
                                        }
                                    };
                                    window.Plotly.relayout(plotElement, update);
                                }
                                window.Plotly.Plots.resize(plotElement);
                            }
                        }
                    });
                }
            </script>
        </head>
        <body>
        """
        
        # Add header section
        html_content += self.create_header_section()
        
        # Add main content container
        html_content += '<div class="main-container">'
        
        # Add plots with enhanced descriptions and interpretation guides
        for i, plot in enumerate(self.plots):
            interpretation_guide = self._get_interpretation_guide(plot['class_name'])
            
            html_content += f"""
            <div class="section" id="section_{i}">
                <div class="section-header">
                    <h2>{plot['title']}</h2>
                </div>
                <div class="section-content">
                    <div class="description">
                        {plot['description']}
                    </div>
                    <div class="plot-container">
                        {plot['figure'].to_html(include_plotlyjs=False, div_id=f"plot_{i}")}
                    </div>
                    {interpretation_guide}
                </div>
            </div>
            """
        
        html_content += '</div>'  # Close main content container
        
        # Add footer
        html_content += f"""
        <div class="footer">
            <h3 style="margin: 0 0 10px 0; color: #2c3e50;">AlignAIR Evaluation System</h3>
            <p style="margin: 5px 0;">Report generated on {self.report_metadata['generation_time']}</p>
            <p style="margin: 5px 0;">Total sequences analyzed: {self.report_metadata['total_sequences']:,}</p>
            <p style="margin: 15px 0 0 0; font-size: 12px; color: #95a5a6;">
                This report provides comprehensive analysis of AlignAIR model performance across multiple dimensions.
                For questions or support, please refer to the AlignAIR documentation.
            </p>
        </div>
        """
        
        # Close HTML
        html_content += """
        </body>
        </html>
        """
        
        return html_content

    def _get_interpretation_guide(self, class_name):
        """Get interpretation guide for specific plot types"""
        guides = {
            'LikelihoodCalibrationPlot': {
                'title': 'How to Interpret This Analysis',
                'points': [
                    '<strong>Calibration Plot:</strong> Points close to the diagonal line (y=x) indicate well-calibrated predictions. Deviations suggest over- or under-confident predictions.',
                    '<strong>Confidence Bands:</strong> Gray bands show uncertainty in calibration. Wider bands indicate less reliable calibration estimates.',
                    '<strong>Performance vs Mutation Rate:</strong> Shows how accuracy varies with sequence mutation level. Generally, higher mutation rates make prediction more challenging.',
                    '<strong>Top-K Hit Rates:</strong> Compare different prediction strategies. Higher values indicate better performance.',
                    '<strong>Dynamic Threshold:</strong> Adaptive method that adjusts based on prediction confidence.'
                ]
            },
            'PerformanceMetricsPlot': {
                'title': 'Understanding Performance Metrics',
                'points': [
                    '<strong>Gene-wise Accuracy:</strong> Overall success rate for each gene type (V, D, J). Higher bars indicate better performance.',
                    '<strong>Jaccard Similarity:</strong> Measures overlap between predicted and true alleles. Values closer to 1.0 indicate better agreement.',
                    '<strong>Performance Summary Heatmap:</strong> Color-coded overview of metrics. Darker colors typically indicate better performance.',
                    '<strong>Individual Gene Trends:</strong> Shows accuracy patterns across sequences. Smooth trends indicate consistent performance.',
                    '<strong>Box Plots:</strong> Show distribution of performance metrics. Tighter distributions indicate more consistent predictions.'
                ]
            },
            'SequenceAnalysisPlot': {
                'title': 'Sequence Characteristics Impact',
                'points': [
                    '<strong>Length Distribution:</strong> Shows the range of sequence lengths in your dataset. Most sequences should fall within model training range.',
                    '<strong>Mutation Rate Distribution:</strong> Higher mutation rates generally make prediction more difficult.',
                    '<strong>Length vs Performance:</strong> Scatter plot showing if sequence length affects accuracy. Trend line shows overall relationship.',
                    '<strong>Mutation vs Performance:</strong> Shows impact of mutations on prediction quality. Generally, more mutations = lower accuracy.',
                    '<strong>Optimal Range:</strong> Look for sequence characteristics where performance is highest.'
                ]
            },
            'AlleleFrequencyPlot': {
                'title': 'Allele Distribution Analysis',
                'points': [
                    '<strong>Ground Truth vs Predictions:</strong> Compare the frequency of alleles in your data vs model predictions.',
                    '<strong>Bias Detection:</strong> If prediction frequencies differ significantly from ground truth, the model may have learned biases.',
                    '<strong>Top Alleles:</strong> Most common alleles are shown. Rare alleles may be harder to predict accurately.',
                    '<strong>Coverage:</strong> Check if the model predicts the full range of alleles present in your data.',
                    '<strong>Clinical Relevance:</strong> Ensure important alleles in your population are well-represented in predictions.'
                ]
            },
            'ConfidenceAnalysisPlot': {
                'title': 'Confidence and Uncertainty Metrics',
                'points': [
                    '<strong>Max Likelihood Distribution:</strong> Shows how confident the model is. Peaks near 1.0 indicate high confidence predictions.',
                    '<strong>Entropy Distribution:</strong> Measures prediction uncertainty. Lower entropy = more certain predictions.',
                    '<strong>Confidence vs Entropy:</strong> Scatter plot showing relationship between confidence and uncertainty. Points colored by standard deviation.',
                    '<strong>Ideal Pattern:</strong> High confidence (high max likelihood) should correspond to low uncertainty (low entropy).',
                    '<strong>Calibration Check:</strong> Well-calibrated models show clear separation between confident and uncertain predictions.'
                ]
            },
            'ThresholdEffectsPlot': {
                'title': 'Threshold Optimization Guide',
                'points': [
                    '<strong>Threshold vs Accuracy:</strong> Shows how prediction accuracy changes with different confidence thresholds.',
                    '<strong>Threshold vs Calls:</strong> Higher thresholds = fewer predictions per sequence but potentially higher quality.',
                    '<strong>Trade-off Analysis:</strong> Find the optimal balance between accuracy and number of calls for your use case.',
                    '<strong>Summary Heatmap:</strong> Quick reference for threshold performance across genes at common threshold values.',
                    '<strong>Recommended Thresholds:</strong> Look for the "knee" in accuracy curves where returns diminish.'
                ]
            },
            'ErrorAnalysisPlot': {
                'title': 'Deep Learning Model Error Analysis',
                'points': [
                    '<strong>Allele Assignment Errors:</strong> Breakdown of error types: correct predictions, wrong alleles, no calls, and unexpected calls.',
                    '<strong>Confidence vs Accuracy:</strong> Relationship between model confidence and actual prediction accuracy. Well-calibrated models show strong correlation.',
                    '<strong>Segmentation Boundary Errors:</strong> Analysis of V/D/J start/end position prediction accuracy. Larger errors indicate segmentation challenges.',
                    '<strong>Mutation Rate Prediction:</strong> Scatter plot comparing predicted vs actual mutation rates. Points near diagonal indicate good prediction.',
                    '<strong>Productivity Prediction:</strong> Confusion matrix showing true/false positives and negatives for productive sequence classification.',
                    '<strong>Sequence Length Impact:</strong> How sequence length affects prediction accuracy. May reveal model limitations with very short/long sequences.',
                    '<strong>Gene-Specific Error Rates:</strong> Overall error rates by gene type (V, D, J). Identifies which genes are most challenging.',
                    '<strong>Confidence by Error Type:</strong> Distribution of model confidence for different error types. Helps identify overconfident incorrect predictions.',
                    '<strong>Model Calibration:</strong> Compares predicted confidence to empirical accuracy. Perfect calibration follows the diagonal line.'
                ]
            }
        }
        
        guide_info = guides.get(class_name, {
            'title': 'Analysis Interpretation',
            'points': ['This analysis provides insights into model performance and behavior.']
        })
        
        points_html = ''.join([f'<li>{point}</li>' for point in guide_info['points']])
        
        return f"""
        <div class="interpretation-guide">
            <h4>{guide_info['title']}</h4>
            <ul>
                {points_html}
            </ul>
        </div>
        """

    def show_report_summary(self):
        """Display a summary of the report contents"""
        print(f"\n{'='*60}")
        print(f"AlignAIR Evaluation Report Summary")
        print(f"{'='*60}")
        print(f"Total Sequences: {self.report_metadata['total_sequences']:,}")
        print(f"Generation Time: {self.report_metadata['generation_time']}")
        print(f"Total Plots: {len(self.plots)}")
        print(f"\nIncluded Analyses:")
        
        for i, plot in enumerate(self.plots, 1):
            print(f"  {i}. {plot['title']} ({plot['class_name']})")
        
        print(f"{'='*60}\n")
